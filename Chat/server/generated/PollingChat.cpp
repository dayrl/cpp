// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `PollingChat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <PollingChat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __PollingChat__PollingChatSession__getInitialUsers_name = "getInitialUsers";

const ::std::string __PollingChat__PollingChatSession__getUpdates_name = "getUpdates";

const ::std::string __PollingChat__PollingChatSession__send_name = "send";

const ::std::string __PollingChat__PollingChatSession__destroy_name = "destroy";

const ::std::string __PollingChat__PollingChatSessionFactory__create_name = "create";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::PollingChat::CannotCreateSessionException> __PollingChat__CannotCreateSessionException_init("::PollingChat::CannotCreateSessionException");

}

PollingChat::CannotCreateSessionException::CannotCreateSessionException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

PollingChat::CannotCreateSessionException::~CannotCreateSessionException() throw()
{
}

::std::string
PollingChat::CannotCreateSessionException::ice_name() const
{
    return "PollingChat::CannotCreateSessionException";
}

PollingChat::CannotCreateSessionException*
PollingChat::CannotCreateSessionException::ice_clone() const
{
    return new CannotCreateSessionException(*this);
}

void
PollingChat::CannotCreateSessionException::ice_throw() const
{
    throw *this;
}

void
PollingChat::CannotCreateSessionException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::PollingChat::CannotCreateSessionException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
PollingChat::CannotCreateSessionException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::PollingChat::upCast(::IceProxy::PollingChat::ChatRoomEvent* p) { return p; }

void
::IceProxy::PollingChat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::ChatRoomEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PollingChat::ChatRoomEvent;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::PollingChat::ChatRoomEvent::ice_staticId()
{
    return ::PollingChat::ChatRoomEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::PollingChat::ChatRoomEvent::__newInstance() const
{
    return new ChatRoomEvent;
}
::IceProxy::Ice::Object* ::IceProxy::PollingChat::upCast(::IceProxy::PollingChat::UserJoinedEvent* p) { return p; }

void
::IceProxy::PollingChat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::UserJoinedEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PollingChat::UserJoinedEvent;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::PollingChat::UserJoinedEvent::ice_staticId()
{
    return ::PollingChat::UserJoinedEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::PollingChat::UserJoinedEvent::__newInstance() const
{
    return new UserJoinedEvent;
}
::IceProxy::Ice::Object* ::IceProxy::PollingChat::upCast(::IceProxy::PollingChat::UserLeftEvent* p) { return p; }

void
::IceProxy::PollingChat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::UserLeftEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PollingChat::UserLeftEvent;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::PollingChat::UserLeftEvent::ice_staticId()
{
    return ::PollingChat::UserLeftEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::PollingChat::UserLeftEvent::__newInstance() const
{
    return new UserLeftEvent;
}
::IceProxy::Ice::Object* ::IceProxy::PollingChat::upCast(::IceProxy::PollingChat::MessageEvent* p) { return p; }

void
::IceProxy::PollingChat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::MessageEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PollingChat::MessageEvent;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::PollingChat::MessageEvent::ice_staticId()
{
    return ::PollingChat::MessageEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::PollingChat::MessageEvent::__newInstance() const
{
    return new MessageEvent;
}
::IceProxy::Ice::Object* ::IceProxy::PollingChat::upCast(::IceProxy::PollingChat::PollingChatSession* p) { return p; }

void
::IceProxy::PollingChat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::PollingChatSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PollingChat::PollingChatSession;
        v->__copyFrom(proxy);
    }
}

::Ice::StringSeq
IceProxy::PollingChat::PollingChatSession::getInitialUsers(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__PollingChat__PollingChatSession__getInitialUsers_name);
    ::IceInternal::Outgoing __og(this, __PollingChat__PollingChatSession__getInitialUsers_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::StringSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::begin_getInitialUsers(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PollingChat__PollingChatSession__getInitialUsers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PollingChat__PollingChatSession__getInitialUsers_name, __del, __cookie);
    try
    {
        __result->prepare(__PollingChat__PollingChatSession__getInitialUsers_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::__begin_getInitialUsers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
            ::Ice::StringSeq __ret;
            try
            {
                __ret = __proxy->end_getInitialUsers(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Ice::StringSeq&)> _response;
    };
    return begin_getInitialUsers(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::StringSeq
IceProxy::PollingChat::PollingChatSession::end_getInitialUsers(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PollingChat__PollingChatSession__getInitialUsers_name);
    ::Ice::StringSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::PollingChat::ChatRoomEventSeq
IceProxy::PollingChat::PollingChatSession::getUpdates(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__PollingChat__PollingChatSession__getUpdates_name);
    ::IceInternal::Outgoing __og(this, __PollingChat__PollingChatSession__getUpdates_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::PollingChat::ChatRoomEventSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::begin_getUpdates(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PollingChat__PollingChatSession__getUpdates_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PollingChat__PollingChatSession__getUpdates_name, __del, __cookie);
    try
    {
        __result->prepare(__PollingChat__PollingChatSession__getUpdates_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::__begin_getUpdates(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::PollingChat::ChatRoomEventSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::PollingChat::ChatRoomEventSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
            ::PollingChat::ChatRoomEventSeq __ret;
            try
            {
                __ret = __proxy->end_getUpdates(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::PollingChat::ChatRoomEventSeq&)> _response;
    };
    return begin_getUpdates(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::PollingChat::ChatRoomEventSeq
IceProxy::PollingChat::PollingChatSession::end_getUpdates(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PollingChat__PollingChatSession__getUpdates_name);
    ::PollingChat::ChatRoomEventSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

::Ice::Long
IceProxy::PollingChat::PollingChatSession::send(const ::std::string& __p_message, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__PollingChat__PollingChatSession__send_name);
    ::IceInternal::Outgoing __og(this, __PollingChat__PollingChatSession__send_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_message);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::InvalidMessageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Long __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::begin_send(const ::std::string& __p_message, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PollingChat__PollingChatSession__send_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PollingChat__PollingChatSession__send_name, __del, __cookie);
    try
    {
        __result->prepare(__PollingChat__PollingChatSession__send_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_message);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::__begin_send(const ::std::string& __p_message, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __ret;
            try
            {
                __ret = __proxy->end_send(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Long)> _response;
    };
    return begin_send(__p_message, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Long
IceProxy::PollingChat::PollingChatSession::end_send(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PollingChat__PollingChatSession__send_name);
    ::Ice::Long __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::InvalidMessageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::PollingChat::PollingChatSession::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __PollingChat__PollingChatSession__destroy_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSession::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PollingChat__PollingChatSession__destroy_name, __del, __cookie);
    try
    {
        __result->prepare(__PollingChat__PollingChatSession__destroy_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::PollingChat::PollingChatSession::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __PollingChat__PollingChatSession__destroy_name);
}

const ::std::string&
IceProxy::PollingChat::PollingChatSession::ice_staticId()
{
    return ::PollingChat::PollingChatSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::PollingChat::PollingChatSession::__newInstance() const
{
    return new PollingChatSession;
}
::IceProxy::Ice::Object* ::IceProxy::PollingChat::upCast(::IceProxy::PollingChat::PollingChatSessionFactory* p) { return p; }

void
::IceProxy::PollingChat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::PollingChatSessionFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PollingChat::PollingChatSessionFactory;
        v->__copyFrom(proxy);
    }
}

::PollingChat::PollingChatSessionPrx
IceProxy::PollingChat::PollingChatSessionFactory::create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__PollingChat__PollingChatSessionFactory__create_name);
    ::IceInternal::Outgoing __og(this, __PollingChat__PollingChatSessionFactory__create_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_password);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::PollingChat::CannotCreateSessionException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::PollingChat::PollingChatSessionPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSessionFactory::begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PollingChat__PollingChatSessionFactory__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PollingChat__PollingChatSessionFactory__create_name, __del, __cookie);
    try
    {
        __result->prepare(__PollingChat__PollingChatSessionFactory__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_password);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::PollingChat::PollingChatSessionFactory::__begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::PollingChat::PollingChatSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::PollingChat::PollingChatSessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::PollingChat::PollingChatSessionFactoryPrx __proxy = ::PollingChat::PollingChatSessionFactoryPrx::uncheckedCast(__result->getProxy());
            ::PollingChat::PollingChatSessionPrx __ret;
            try
            {
                __ret = __proxy->end_create(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::PollingChat::PollingChatSessionPrx&)> _response;
    };
    return begin_create(__p_name, __p_password, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::PollingChat::PollingChatSessionPrx
IceProxy::PollingChat::PollingChatSessionFactory::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PollingChat__PollingChatSessionFactory__create_name);
    ::PollingChat::PollingChatSessionPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::PollingChat::CannotCreateSessionException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::PollingChat::PollingChatSessionFactory::ice_staticId()
{
    return ::PollingChat::PollingChatSessionFactory::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::PollingChat::PollingChatSessionFactory::__newInstance() const
{
    return new PollingChatSessionFactory;
}

::Ice::Object* PollingChat::upCast(::PollingChat::ChatRoomEvent* p) { return p; }
::Ice::ObjectPtr
PollingChat::ChatRoomEvent::ice_clone() const
{
    ::Ice::Object* __p = new ChatRoomEvent(*this);
    return __p;
}

namespace
{
const ::std::string __PollingChat__ChatRoomEvent_ids[2] =
{
    "::Ice::Object",
    "::PollingChat::ChatRoomEvent"
};

}

bool
PollingChat::ChatRoomEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PollingChat__ChatRoomEvent_ids, __PollingChat__ChatRoomEvent_ids + 2, _s);
}

::std::vector< ::std::string>
PollingChat::ChatRoomEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PollingChat__ChatRoomEvent_ids[0], &__PollingChat__ChatRoomEvent_ids[2]);
}

const ::std::string&
PollingChat::ChatRoomEvent::ice_id(const ::Ice::Current&) const
{
    return __PollingChat__ChatRoomEvent_ids[1];
}

const ::std::string&
PollingChat::ChatRoomEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::PollingChat::ChatRoomEvent";
    return typeId;
#else
    return __PollingChat__ChatRoomEvent_ids[1];
#endif
}

void
PollingChat::ChatRoomEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(timestamp);
    __os->write(name);
    __os->endWriteSlice();
}

void
PollingChat::ChatRoomEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(timestamp);
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::PollingChat::ChatRoomEvent> __PollingChat__ChatRoomEvent_init("::PollingChat::ChatRoomEvent");
}

::Ice::ObjectFactoryPtr
PollingChat::ChatRoomEvent::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::PollingChat::ChatRoomEvent::ice_staticId());
}

void 
PollingChat::__patch(ChatRoomEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::PollingChat::ChatRoomEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::PollingChat::ChatRoomEvent::ice_staticId(), v);
    }
}

::Ice::Object* PollingChat::upCast(::PollingChat::UserJoinedEvent* p) { return p; }
::Ice::ObjectPtr
PollingChat::UserJoinedEvent::ice_clone() const
{
    ::Ice::Object* __p = new UserJoinedEvent(*this);
    return __p;
}

namespace
{
const ::std::string __PollingChat__UserJoinedEvent_ids[3] =
{
    "::Ice::Object",
    "::PollingChat::ChatRoomEvent",
    "::PollingChat::UserJoinedEvent"
};

}

bool
PollingChat::UserJoinedEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PollingChat__UserJoinedEvent_ids, __PollingChat__UserJoinedEvent_ids + 3, _s);
}

::std::vector< ::std::string>
PollingChat::UserJoinedEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PollingChat__UserJoinedEvent_ids[0], &__PollingChat__UserJoinedEvent_ids[3]);
}

const ::std::string&
PollingChat::UserJoinedEvent::ice_id(const ::Ice::Current&) const
{
    return __PollingChat__UserJoinedEvent_ids[2];
}

const ::std::string&
PollingChat::UserJoinedEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::PollingChat::UserJoinedEvent";
    return typeId;
#else
    return __PollingChat__UserJoinedEvent_ids[2];
#endif
}

void
PollingChat::UserJoinedEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::PollingChat::ChatRoomEvent::__writeImpl(__os);
}

void
PollingChat::UserJoinedEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::PollingChat::ChatRoomEvent::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::PollingChat::UserJoinedEvent> __PollingChat__UserJoinedEvent_init("::PollingChat::UserJoinedEvent");
}

::Ice::ObjectFactoryPtr
PollingChat::UserJoinedEvent::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::PollingChat::UserJoinedEvent::ice_staticId());
}

void 
PollingChat::__patch(UserJoinedEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::PollingChat::UserJoinedEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::PollingChat::UserJoinedEvent::ice_staticId(), v);
    }
}

::Ice::Object* PollingChat::upCast(::PollingChat::UserLeftEvent* p) { return p; }
::Ice::ObjectPtr
PollingChat::UserLeftEvent::ice_clone() const
{
    ::Ice::Object* __p = new UserLeftEvent(*this);
    return __p;
}

namespace
{
const ::std::string __PollingChat__UserLeftEvent_ids[3] =
{
    "::Ice::Object",
    "::PollingChat::ChatRoomEvent",
    "::PollingChat::UserLeftEvent"
};

}

bool
PollingChat::UserLeftEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PollingChat__UserLeftEvent_ids, __PollingChat__UserLeftEvent_ids + 3, _s);
}

::std::vector< ::std::string>
PollingChat::UserLeftEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PollingChat__UserLeftEvent_ids[0], &__PollingChat__UserLeftEvent_ids[3]);
}

const ::std::string&
PollingChat::UserLeftEvent::ice_id(const ::Ice::Current&) const
{
    return __PollingChat__UserLeftEvent_ids[2];
}

const ::std::string&
PollingChat::UserLeftEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::PollingChat::UserLeftEvent";
    return typeId;
#else
    return __PollingChat__UserLeftEvent_ids[2];
#endif
}

void
PollingChat::UserLeftEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::PollingChat::ChatRoomEvent::__writeImpl(__os);
}

void
PollingChat::UserLeftEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::PollingChat::ChatRoomEvent::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::PollingChat::UserLeftEvent> __PollingChat__UserLeftEvent_init("::PollingChat::UserLeftEvent");
}

::Ice::ObjectFactoryPtr
PollingChat::UserLeftEvent::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::PollingChat::UserLeftEvent::ice_staticId());
}

void 
PollingChat::__patch(UserLeftEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::PollingChat::UserLeftEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::PollingChat::UserLeftEvent::ice_staticId(), v);
    }
}

::Ice::Object* PollingChat::upCast(::PollingChat::MessageEvent* p) { return p; }
::Ice::ObjectPtr
PollingChat::MessageEvent::ice_clone() const
{
    ::Ice::Object* __p = new MessageEvent(*this);
    return __p;
}

namespace
{
const ::std::string __PollingChat__MessageEvent_ids[3] =
{
    "::Ice::Object",
    "::PollingChat::ChatRoomEvent",
    "::PollingChat::MessageEvent"
};

}

bool
PollingChat::MessageEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PollingChat__MessageEvent_ids, __PollingChat__MessageEvent_ids + 3, _s);
}

::std::vector< ::std::string>
PollingChat::MessageEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PollingChat__MessageEvent_ids[0], &__PollingChat__MessageEvent_ids[3]);
}

const ::std::string&
PollingChat::MessageEvent::ice_id(const ::Ice::Current&) const
{
    return __PollingChat__MessageEvent_ids[2];
}

const ::std::string&
PollingChat::MessageEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::PollingChat::MessageEvent";
    return typeId;
#else
    return __PollingChat__MessageEvent_ids[2];
#endif
}

void
PollingChat::MessageEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(message);
    __os->endWriteSlice();
    ::PollingChat::ChatRoomEvent::__writeImpl(__os);
}

void
PollingChat::MessageEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(message);
    __is->endReadSlice();
    ::PollingChat::ChatRoomEvent::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::PollingChat::MessageEvent> __PollingChat__MessageEvent_init("::PollingChat::MessageEvent");
}

::Ice::ObjectFactoryPtr
PollingChat::MessageEvent::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::PollingChat::MessageEvent::ice_staticId());
}

void 
PollingChat::__patch(MessageEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::PollingChat::MessageEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::PollingChat::MessageEvent::ice_staticId(), v);
    }
}

::Ice::Object* PollingChat::upCast(::PollingChat::PollingChatSession* p) { return p; }

namespace
{
const ::std::string __PollingChat__PollingChatSession_ids[2] =
{
    "::Ice::Object",
    "::PollingChat::PollingChatSession"
};

}

bool
PollingChat::PollingChatSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PollingChat__PollingChatSession_ids, __PollingChat__PollingChatSession_ids + 2, _s);
}

::std::vector< ::std::string>
PollingChat::PollingChatSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PollingChat__PollingChatSession_ids[0], &__PollingChat__PollingChatSession_ids[2]);
}

const ::std::string&
PollingChat::PollingChatSession::ice_id(const ::Ice::Current&) const
{
    return __PollingChat__PollingChatSession_ids[1];
}

const ::std::string&
PollingChat::PollingChatSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::PollingChat::PollingChatSession";
    return typeId;
#else
    return __PollingChat__PollingChatSession_ids[1];
#endif
}

::Ice::DispatchStatus
PollingChat::PollingChatSession::___getInitialUsers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::StringSeq __ret = getInitialUsers(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PollingChat::PollingChatSession::___getUpdates(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::PollingChat::ChatRoomEventSeq __ret = getUpdates(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PollingChat::PollingChatSession::___send(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_message;
    __is->read(__p_message);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = send(__p_message, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::InvalidMessageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
PollingChat::PollingChatSession::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __PollingChat__PollingChatSession_all[] =
{
    "destroy",
    "getInitialUsers",
    "getUpdates",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "send"
};

}

::Ice::DispatchStatus
PollingChat::PollingChatSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__PollingChat__PollingChatSession_all, __PollingChat__PollingChatSession_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __PollingChat__PollingChatSession_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___getInitialUsers(in, current);
        }
        case 2:
        {
            return ___getUpdates(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___send(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
PollingChat::PollingChatSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
PollingChat::PollingChatSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
PollingChat::__patch(PollingChatSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::PollingChat::PollingChatSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::PollingChat::PollingChatSession::ice_staticId(), v);
    }
}

::Ice::Object* PollingChat::upCast(::PollingChat::PollingChatSessionFactory* p) { return p; }

namespace
{
const ::std::string __PollingChat__PollingChatSessionFactory_ids[2] =
{
    "::Ice::Object",
    "::PollingChat::PollingChatSessionFactory"
};

}

bool
PollingChat::PollingChatSessionFactory::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PollingChat__PollingChatSessionFactory_ids, __PollingChat__PollingChatSessionFactory_ids + 2, _s);
}

::std::vector< ::std::string>
PollingChat::PollingChatSessionFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PollingChat__PollingChatSessionFactory_ids[0], &__PollingChat__PollingChatSessionFactory_ids[2]);
}

const ::std::string&
PollingChat::PollingChatSessionFactory::ice_id(const ::Ice::Current&) const
{
    return __PollingChat__PollingChatSessionFactory_ids[1];
}

const ::std::string&
PollingChat::PollingChatSessionFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::PollingChat::PollingChatSessionFactory";
    return typeId;
#else
    return __PollingChat__PollingChatSessionFactory_ids[1];
#endif
}

::Ice::DispatchStatus
PollingChat::PollingChatSessionFactory::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    ::std::string __p_password;
    __is->read(__p_name);
    __is->read(__p_password);
    __inS.endReadParams();
    try
    {
        ::PollingChat::PollingChatSessionPrx __ret = create(__p_name, __p_password, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::PollingChat::CannotCreateSessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __PollingChat__PollingChatSessionFactory_all[] =
{
    "create",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
PollingChat::PollingChatSessionFactory::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__PollingChat__PollingChatSessionFactory_all, __PollingChat__PollingChatSessionFactory_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __PollingChat__PollingChatSessionFactory_all)
    {
        case 0:
        {
            return ___create(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
PollingChat::PollingChatSessionFactory::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
PollingChat::PollingChatSessionFactory::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
PollingChat::__patch(PollingChatSessionFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::PollingChat::PollingChatSessionFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::PollingChat::PollingChatSessionFactory::ice_staticId(), v);
    }
}
