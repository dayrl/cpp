// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `PollingChat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __E__Program_Files__x86__ZeroC_Ice_3_6_3_Ice_3_6_3_demos_cpp_Chat_server_generated_PollingChat_h__
#define __E__Program_Files__x86__ZeroC_Ice_3_6_3_Ice_3_6_3_demos_cpp_Chat_server_generated_PollingChat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Chat.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace PollingChat
{

class ChatRoomEvent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::ChatRoomEvent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PollingChat::ChatRoomEvent*);

class UserJoinedEvent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::UserJoinedEvent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PollingChat::UserJoinedEvent*);

class UserLeftEvent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::UserLeftEvent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PollingChat::UserLeftEvent*);

class MessageEvent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::MessageEvent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PollingChat::MessageEvent*);

class PollingChatSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::PollingChatSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PollingChat::PollingChatSession*);

class PollingChatSessionFactory;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::PollingChatSessionFactory>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PollingChat::PollingChatSessionFactory*);

}

}

namespace PollingChat
{

class ChatRoomEvent;
::Ice::Object* upCast(::PollingChat::ChatRoomEvent*);
typedef ::IceInternal::Handle< ::PollingChat::ChatRoomEvent> ChatRoomEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::ChatRoomEvent> ChatRoomEventPrx;
void __patch(ChatRoomEventPtr&, const ::Ice::ObjectPtr&);

class UserJoinedEvent;
::Ice::Object* upCast(::PollingChat::UserJoinedEvent*);
typedef ::IceInternal::Handle< ::PollingChat::UserJoinedEvent> UserJoinedEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::UserJoinedEvent> UserJoinedEventPrx;
void __patch(UserJoinedEventPtr&, const ::Ice::ObjectPtr&);

class UserLeftEvent;
::Ice::Object* upCast(::PollingChat::UserLeftEvent*);
typedef ::IceInternal::Handle< ::PollingChat::UserLeftEvent> UserLeftEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::UserLeftEvent> UserLeftEventPrx;
void __patch(UserLeftEventPtr&, const ::Ice::ObjectPtr&);

class MessageEvent;
::Ice::Object* upCast(::PollingChat::MessageEvent*);
typedef ::IceInternal::Handle< ::PollingChat::MessageEvent> MessageEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::MessageEvent> MessageEventPrx;
void __patch(MessageEventPtr&, const ::Ice::ObjectPtr&);

class PollingChatSession;
::Ice::Object* upCast(::PollingChat::PollingChatSession*);
typedef ::IceInternal::Handle< ::PollingChat::PollingChatSession> PollingChatSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::PollingChatSession> PollingChatSessionPrx;
void __patch(PollingChatSessionPtr&, const ::Ice::ObjectPtr&);

class PollingChatSessionFactory;
::Ice::Object* upCast(::PollingChat::PollingChatSessionFactory*);
typedef ::IceInternal::Handle< ::PollingChat::PollingChatSessionFactory> PollingChatSessionFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PollingChat::PollingChatSessionFactory> PollingChatSessionFactoryPrx;
void __patch(PollingChatSessionFactoryPtr&, const ::Ice::ObjectPtr&);

}

namespace PollingChat
{

typedef ::std::vector< ::PollingChat::ChatRoomEventPtr> ChatRoomEventSeq;

class CannotCreateSessionException : public ::Ice::UserException
{
public:

    CannotCreateSessionException() {}
    explicit CannotCreateSessionException(const ::std::string&);
    virtual ~CannotCreateSessionException() throw();

    virtual ::std::string ice_name() const;
    virtual CannotCreateSessionException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static CannotCreateSessionException __CannotCreateSessionException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::PollingChat::CannotCreateSessionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace PollingChat
{

class Callback_PollingChatSession_getInitialUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PollingChatSession_getInitialUsers_Base> Callback_PollingChatSession_getInitialUsersPtr;

class Callback_PollingChatSession_getUpdates_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PollingChatSession_getUpdates_Base> Callback_PollingChatSession_getUpdatesPtr;

class Callback_PollingChatSession_send_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PollingChatSession_send_Base> Callback_PollingChatSession_sendPtr;

class Callback_PollingChatSession_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PollingChatSession_destroy_Base> Callback_PollingChatSession_destroyPtr;

class Callback_PollingChatSessionFactory_create_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PollingChatSessionFactory_create_Base> Callback_PollingChatSessionFactory_createPtr;

}

namespace IceProxy
{

namespace PollingChat
{

class ChatRoomEvent : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_twoway() const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_oneway() const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_batchOneway() const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_datagram() const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_batchDatagram() const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomEvent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChatRoomEvent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UserJoinedEvent : virtual public ::IceProxy::PollingChat::ChatRoomEvent
{
public:
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_secure(bool __secure) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_twoway() const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_oneway() const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_batchOneway() const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_datagram() const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_batchDatagram() const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_compress(bool __compress) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UserJoinedEvent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<UserJoinedEvent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UserLeftEvent : virtual public ::IceProxy::PollingChat::ChatRoomEvent
{
public:
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_secure(bool __secure) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_twoway() const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_oneway() const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_batchOneway() const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_datagram() const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_batchDatagram() const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_compress(bool __compress) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UserLeftEvent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<UserLeftEvent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MessageEvent : virtual public ::IceProxy::PollingChat::ChatRoomEvent
{
public:
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_secure(bool __secure) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_twoway() const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_oneway() const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_batchOneway() const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_datagram() const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_batchDatagram() const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_compress(bool __compress) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MessageEvent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MessageEvent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PollingChatSession : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::StringSeq getInitialUsers()
    {
        return getInitialUsers(0);
    }
    ::Ice::StringSeq getInitialUsers(const ::Ice::Context& __ctx)
    {
        return getInitialUsers(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInitialUsers(const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInitialUsers(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInitialUsers(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInitialUsers(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInitialUsers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInitialUsers(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInitialUsers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInitialUsers(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInitialUsers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInitialUsers()
    {
        return begin_getInitialUsers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInitialUsers(const ::Ice::Context& __ctx)
    {
        return begin_getInitialUsers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInitialUsers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitialUsers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInitialUsers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitialUsers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInitialUsers(const ::PollingChat::Callback_PollingChatSession_getInitialUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitialUsers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInitialUsers(const ::Ice::Context& __ctx, const ::PollingChat::Callback_PollingChatSession_getInitialUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitialUsers(&__ctx, __del, __cookie);
    }

    ::Ice::StringSeq end_getInitialUsers(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::StringSeq getInitialUsers(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInitialUsers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::PollingChat::ChatRoomEventSeq getUpdates()
    {
        return getUpdates(0);
    }
    ::PollingChat::ChatRoomEventSeq getUpdates(const ::Ice::Context& __ctx)
    {
        return getUpdates(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUpdates(const ::IceInternal::Function<void (const ::PollingChat::ChatRoomEventSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUpdates(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUpdates(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUpdates(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUpdates(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::PollingChat::ChatRoomEventSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUpdates(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUpdates(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUpdates(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUpdates(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::PollingChat::ChatRoomEventSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUpdates()
    {
        return begin_getUpdates(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUpdates(const ::Ice::Context& __ctx)
    {
        return begin_getUpdates(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUpdates(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdates(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUpdates(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdates(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUpdates(const ::PollingChat::Callback_PollingChatSession_getUpdatesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdates(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUpdates(const ::Ice::Context& __ctx, const ::PollingChat::Callback_PollingChatSession_getUpdatesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdates(&__ctx, __del, __cookie);
    }

    ::PollingChat::ChatRoomEventSeq end_getUpdates(const ::Ice::AsyncResultPtr&);
    
private:

    ::PollingChat::ChatRoomEventSeq getUpdates(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUpdates(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long send(const ::std::string& __p_message)
    {
        return send(__p_message, 0);
    }
    ::Ice::Long send(const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return send(__p_message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_send(__p_message, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_send(__p_message, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_send(const ::std::string& __p_message, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message)
    {
        return begin_send(__p_message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return begin_send(__p_message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::PollingChat::Callback_PollingChatSession_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::PollingChat::Callback_PollingChatSession_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_send(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long send(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_send(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::PollingChat::Callback_PollingChatSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::PollingChat::Callback_PollingChatSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_twoway() const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_oneway() const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_batchOneway() const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_datagram() const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_batchDatagram() const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PollingChatSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PollingChatSessionFactory : virtual public ::IceProxy::Ice::Object
{
public:

    ::PollingChat::PollingChatSessionPrx create(const ::std::string& __p_name, const ::std::string& __p_password)
    {
        return create(__p_name, __p_password, 0);
    }
    ::PollingChat::PollingChatSessionPrx create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return create(__p_name, __p_password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::PollingChat::PollingChatSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(__p_name, __p_password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(__p_name, __p_password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::PollingChat::PollingChatSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(__p_name, __p_password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(__p_name, __p_password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::PollingChat::PollingChatSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_create(const ::std::string& __p_name, const ::std::string& __p_password)
    {
        return begin_create(__p_name, __p_password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return begin_create(__p_name, __p_password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_name, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_name, __p_password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::PollingChat::Callback_PollingChatSessionFactory_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_name, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& __p_name, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::PollingChat::Callback_PollingChatSessionFactory_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_name, __p_password, &__ctx, __del, __cookie);
    }

    ::PollingChat::PollingChatSessionPrx end_create(const ::Ice::AsyncResultPtr&);
    
private:

    ::PollingChat::PollingChatSessionPrx create(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_create(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_secure(bool __secure) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_twoway() const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_oneway() const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_batchOneway() const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_datagram() const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_batchDatagram() const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_compress(bool __compress) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PollingChatSessionFactory> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PollingChatSessionFactory*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace PollingChat
{

class ChatRoomEvent : virtual public ::Ice::Object
{
public:

    typedef ChatRoomEventPrx ProxyType;
    typedef ChatRoomEventPtr PointerType;

    ChatRoomEvent()
    {
    }

    ChatRoomEvent(::Ice::Long __ice_timestamp, const ::std::string& __ice_name) :
        timestamp(__ice_timestamp),
        name(__ice_name)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Long timestamp;

    ::std::string name;
protected:

    virtual ~ChatRoomEvent() {}

friend class ChatRoomEvent__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class ChatRoomEvent__staticInit
{
public:

    ::PollingChat::ChatRoomEvent _init;
};

static ChatRoomEvent__staticInit _ChatRoomEvent_init;
#else
static auto _ChatRoomEvent_init = ::PollingChat::ChatRoomEvent::ice_factory;
#endif

inline bool operator==(const ChatRoomEvent& l, const ChatRoomEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChatRoomEvent& l, const ChatRoomEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class UserJoinedEvent : public ::PollingChat::ChatRoomEvent
{
public:

    typedef UserJoinedEventPrx ProxyType;
    typedef UserJoinedEventPtr PointerType;

    UserJoinedEvent()
    {
    }

    UserJoinedEvent(::Ice::Long __ice_timestamp, const ::std::string& __ice_name) :
        ::PollingChat::ChatRoomEvent(__ice_timestamp, __ice_name)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::PollingChat::ChatRoomEvent::__writeImpl;
    using ::PollingChat::ChatRoomEvent::__readImpl;

    virtual ~UserJoinedEvent() {}
};

inline bool operator==(const UserJoinedEvent& l, const UserJoinedEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserJoinedEvent& l, const UserJoinedEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class UserLeftEvent : public ::PollingChat::ChatRoomEvent
{
public:

    typedef UserLeftEventPrx ProxyType;
    typedef UserLeftEventPtr PointerType;

    UserLeftEvent()
    {
    }

    UserLeftEvent(::Ice::Long __ice_timestamp, const ::std::string& __ice_name) :
        ::PollingChat::ChatRoomEvent(__ice_timestamp, __ice_name)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::PollingChat::ChatRoomEvent::__writeImpl;
    using ::PollingChat::ChatRoomEvent::__readImpl;

    virtual ~UserLeftEvent() {}
};

inline bool operator==(const UserLeftEvent& l, const UserLeftEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserLeftEvent& l, const UserLeftEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MessageEvent : public ::PollingChat::ChatRoomEvent
{
public:

    typedef MessageEventPrx ProxyType;
    typedef MessageEventPtr PointerType;

    MessageEvent()
    {
    }

    MessageEvent(::Ice::Long __ice_timestamp, const ::std::string& __ice_name, const ::std::string& __ice_message) :
        ::PollingChat::ChatRoomEvent(__ice_timestamp, __ice_name),
        message(__ice_message)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::PollingChat::ChatRoomEvent::__writeImpl;
    using ::PollingChat::ChatRoomEvent::__readImpl;

public:

    ::std::string message;
protected:

    virtual ~MessageEvent() {}
};

inline bool operator==(const MessageEvent& l, const MessageEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MessageEvent& l, const MessageEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PollingChatSession : virtual public ::Ice::Object
{
public:

    typedef PollingChatSessionPrx ProxyType;
    typedef PollingChatSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::StringSeq getInitialUsers(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInitialUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::PollingChat::ChatRoomEventSeq getUpdates(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUpdates(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long send(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___send(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const PollingChatSession& l, const PollingChatSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PollingChatSession& l, const PollingChatSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PollingChatSessionFactory : virtual public ::Ice::Object
{
public:

    typedef PollingChatSessionFactoryPrx ProxyType;
    typedef PollingChatSessionFactoryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::PollingChat::PollingChatSessionPrx create(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___create(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const PollingChatSessionFactory& l, const PollingChatSessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PollingChatSessionFactory& l, const PollingChatSessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace PollingChat
{

template<class T>
class CallbackNC_PollingChatSession_getInitialUsers : public Callback_PollingChatSession_getInitialUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::StringSeq&);

    CallbackNC_PollingChatSession_getInitialUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_getInitialUsers(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PollingChatSession_getInitialUsersPtr
newCallback_PollingChatSession_getInitialUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_getInitialUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PollingChatSession_getInitialUsersPtr
newCallback_PollingChatSession_getInitialUsers(T* instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_getInitialUsers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PollingChatSession_getInitialUsers : public Callback_PollingChatSession_getInitialUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::StringSeq&, const CT&);

    Callback_PollingChatSession_getInitialUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_getInitialUsers(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PollingChatSession_getInitialUsersPtr
newCallback_PollingChatSession_getInitialUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_getInitialUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSession_getInitialUsersPtr
newCallback_PollingChatSession_getInitialUsers(T* instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_getInitialUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PollingChatSession_getUpdates : public Callback_PollingChatSession_getUpdates_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::PollingChat::ChatRoomEventSeq&);

    CallbackNC_PollingChatSession_getUpdates(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
        ::PollingChat::ChatRoomEventSeq __ret;
        try
        {
            __ret = __proxy->end_getUpdates(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PollingChatSession_getUpdatesPtr
newCallback_PollingChatSession_getUpdates(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::PollingChat::ChatRoomEventSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_getUpdates<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PollingChatSession_getUpdatesPtr
newCallback_PollingChatSession_getUpdates(T* instance, void (T::*cb)(const ::PollingChat::ChatRoomEventSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_getUpdates<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PollingChatSession_getUpdates : public Callback_PollingChatSession_getUpdates_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::PollingChat::ChatRoomEventSeq&, const CT&);

    Callback_PollingChatSession_getUpdates(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
        ::PollingChat::ChatRoomEventSeq __ret;
        try
        {
            __ret = __proxy->end_getUpdates(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PollingChatSession_getUpdatesPtr
newCallback_PollingChatSession_getUpdates(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::PollingChat::ChatRoomEventSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_getUpdates<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSession_getUpdatesPtr
newCallback_PollingChatSession_getUpdates(T* instance, void (T::*cb)(const ::PollingChat::ChatRoomEventSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_getUpdates<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PollingChatSession_send : public Callback_PollingChatSession_send_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_PollingChatSession_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_send(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PollingChatSession_sendPtr
newCallback_PollingChatSession_send(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_send<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PollingChatSession_sendPtr
newCallback_PollingChatSession_send(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_send<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PollingChatSession_send : public Callback_PollingChatSession_send_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_PollingChatSession_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionPrx __proxy = ::PollingChat::PollingChatSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_send(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PollingChatSession_sendPtr
newCallback_PollingChatSession_send(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSession_sendPtr
newCallback_PollingChatSession_send(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PollingChatSession_destroy : public Callback_PollingChatSession_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PollingChatSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PollingChatSession_destroy : public Callback_PollingChatSession_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PollingChatSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSession_destroyPtr
newCallback_PollingChatSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PollingChatSessionFactory_create : public Callback_PollingChatSessionFactory_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::PollingChat::PollingChatSessionPrx&);

    CallbackNC_PollingChatSessionFactory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionFactoryPrx __proxy = ::PollingChat::PollingChatSessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::PollingChat::PollingChatSessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PollingChatSessionFactory_createPtr
newCallback_PollingChatSessionFactory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::PollingChat::PollingChatSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSessionFactory_create<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PollingChatSessionFactory_createPtr
newCallback_PollingChatSessionFactory_create(T* instance, void (T::*cb)(const ::PollingChat::PollingChatSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PollingChatSessionFactory_create<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PollingChatSessionFactory_create : public Callback_PollingChatSessionFactory_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::PollingChat::PollingChatSessionPrx&, const CT&);

    Callback_PollingChatSessionFactory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PollingChat::PollingChatSessionFactoryPrx __proxy = ::PollingChat::PollingChatSessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::PollingChat::PollingChatSessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PollingChatSessionFactory_createPtr
newCallback_PollingChatSessionFactory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::PollingChat::PollingChatSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSessionFactory_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PollingChatSessionFactory_createPtr
newCallback_PollingChatSessionFactory_create(T* instance, void (T::*cb)(const ::PollingChat::PollingChatSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PollingChatSessionFactory_create<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
