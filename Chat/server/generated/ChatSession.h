// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ChatSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __E__Program_Files__x86__ZeroC_Ice_3_6_3_Ice_3_6_3_demos_cpp_Chat_server_generated_ChatSession_h__
#define __E__Program_Files__x86__ZeroC_Ice_3_6_3_Ice_3_6_3_demos_cpp_Chat_server_generated_ChatSession_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <Glacier2/Session.h>
#include <Chat.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Chat
{

class ChatRoomCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatRoomCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::ChatRoomCallback*);

class ChatSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::ChatSession*);

}

}

namespace Chat
{

class ChatRoomCallback;
::Ice::Object* upCast(::Chat::ChatRoomCallback*);
typedef ::IceInternal::Handle< ::Chat::ChatRoomCallback> ChatRoomCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatRoomCallback> ChatRoomCallbackPrx;
void __patch(ChatRoomCallbackPtr&, const ::Ice::ObjectPtr&);

class ChatSession;
::Ice::Object* upCast(::Chat::ChatSession*);
typedef ::IceInternal::Handle< ::Chat::ChatSession> ChatSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatSession> ChatSessionPrx;
void __patch(ChatSessionPtr&, const ::Ice::ObjectPtr&);

}

namespace Chat
{

class Callback_ChatRoomCallback_init_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomCallback_init_Base> Callback_ChatRoomCallback_initPtr;

class Callback_ChatRoomCallback_send_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomCallback_send_Base> Callback_ChatRoomCallback_sendPtr;

class Callback_ChatRoomCallback_join_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomCallback_join_Base> Callback_ChatRoomCallback_joinPtr;

class Callback_ChatRoomCallback_leave_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomCallback_leave_Base> Callback_ChatRoomCallback_leavePtr;

class Callback_ChatSession_setCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatSession_setCallback_Base> Callback_ChatSession_setCallbackPtr;

class Callback_ChatSession_send_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatSession_send_Base> Callback_ChatSession_sendPtr;

}

namespace IceProxy
{

namespace Chat
{

class ChatRoomCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void init(const ::Ice::StringSeq& __p_users)
    {
        init(__p_users, 0);
    }
    void init(const ::Ice::StringSeq& __p_users, const ::Ice::Context& __ctx)
    {
        init(__p_users, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_init(const ::Ice::StringSeq& __p_users, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_init(__p_users, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_init(const ::Ice::StringSeq& __p_users, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_init(__p_users, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_init(const ::Ice::StringSeq& __p_users, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_init(__p_users, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_init(const ::Ice::StringSeq& __p_users, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_init(__p_users, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq& __p_users)
    {
        return begin_init(__p_users, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq& __p_users, const ::Ice::Context& __ctx)
    {
        return begin_init(__p_users, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq& __p_users, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(__p_users, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq& __p_users, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(__p_users, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq& __p_users, const ::Chat::Callback_ChatRoomCallback_initPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(__p_users, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq& __p_users, const ::Ice::Context& __ctx, const ::Chat::Callback_ChatRoomCallback_initPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(__p_users, &__ctx, __del, __cookie);
    }

    void end_init(const ::Ice::AsyncResultPtr&);
    
private:

    void init(const ::Ice::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_init(const ::Ice::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message)
    {
        send(__p_timestamp, __p_name, __p_message, 0);
    }
    void send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        send(__p_timestamp, __p_name, __p_message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_send(__p_timestamp, __p_name, __p_message, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_timestamp, __p_name, __p_message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_send(__p_timestamp, __p_name, __p_message, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_timestamp, __p_name, __p_message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message)
    {
        return begin_send(__p_timestamp, __p_name, __p_message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return begin_send(__p_timestamp, __p_name, __p_message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_timestamp, __p_name, __p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_timestamp, __p_name, __p_message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Chat::Callback_ChatRoomCallback_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_timestamp, __p_name, __p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Chat::Callback_ChatRoomCallback_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_timestamp, __p_name, __p_message, &__ctx, __del, __cookie);
    }

    void end_send(const ::Ice::AsyncResultPtr&);
    
private:

    void send(::Ice::Long, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_send(::Ice::Long, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void join(::Ice::Long __p_timestamp, const ::std::string& __p_name)
    {
        join(__p_timestamp, __p_name, 0);
    }
    void join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        join(__p_timestamp, __p_name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_join(__p_timestamp, __p_name, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_join(__p_timestamp, __p_name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_join(__p_timestamp, __p_name, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_join(__p_timestamp, __p_name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name)
    {
        return begin_join(__p_timestamp, __p_name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return begin_join(__p_timestamp, __p_name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_join(__p_timestamp, __p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_join(__p_timestamp, __p_name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Chat::Callback_ChatRoomCallback_joinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_join(__p_timestamp, __p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_join(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Chat::Callback_ChatRoomCallback_joinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_join(__p_timestamp, __p_name, &__ctx, __del, __cookie);
    }

    void end_join(const ::Ice::AsyncResultPtr&);
    
private:

    void join(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_join(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void leave(::Ice::Long __p_timestamp, const ::std::string& __p_name)
    {
        leave(__p_timestamp, __p_name, 0);
    }
    void leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        leave(__p_timestamp, __p_name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_leave(__p_timestamp, __p_name, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_leave(__p_timestamp, __p_name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_leave(__p_timestamp, __p_name, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_leave(__p_timestamp, __p_name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name)
    {
        return begin_leave(__p_timestamp, __p_name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return begin_leave(__p_timestamp, __p_name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_leave(__p_timestamp, __p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_leave(__p_timestamp, __p_name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Chat::Callback_ChatRoomCallback_leavePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_leave(__p_timestamp, __p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(::Ice::Long __p_timestamp, const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Chat::Callback_ChatRoomCallback_leavePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_leave(__p_timestamp, __p_name, &__ctx, __del, __cookie);
    }

    void end_leave(const ::Ice::AsyncResultPtr&);
    
private:

    void leave(::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_leave(::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_twoway() const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_oneway() const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_batchOneway() const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_datagram() const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_batchDatagram() const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChatRoomCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChatRoomCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ChatSession : virtual public ::IceProxy::Glacier2::Session
{
public:

    void setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb)
    {
        setCallback(__p_cb, 0);
    }
    void setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        setCallback(__p_cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCallback(__p_cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCallback(__p_cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCallback(__p_cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCallback(__p_cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb)
    {
        return begin_setCallback(__p_cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::Context& __ctx)
    {
        return begin_setCallback(__p_cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallback(__p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallback(__p_cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Chat::Callback_ChatSession_setCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallback(__p_cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx& __p_cb, const ::Ice::Context& __ctx, const ::Chat::Callback_ChatSession_setCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallback(__p_cb, &__ctx, __del, __cookie);
    }

    void end_setCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void setCallback(const ::Chat::ChatRoomCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCallback(const ::Chat::ChatRoomCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long send(const ::std::string& __p_message)
    {
        return send(__p_message, 0);
    }
    ::Ice::Long send(const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return send(__p_message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_send(__p_message, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_send(__p_message, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_send(const ::std::string& __p_message, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message)
    {
        return begin_send(__p_message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return begin_send(__p_message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Chat::Callback_ChatSession_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Chat::Callback_ChatSession_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_message, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_send(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long send(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_send(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ChatSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_twoway() const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_oneway() const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_batchOneway() const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_datagram() const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_batchDatagram() const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChatSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChatSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Chat
{

class ChatRoomCallback : virtual public ::Ice::Object
{
public:

    typedef ChatRoomCallbackPrx ProxyType;
    typedef ChatRoomCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void init(const ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___init(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void send(::Ice::Long, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___send(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void join(::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___join(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void leave(::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___leave(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ChatRoomCallback& l, const ChatRoomCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChatRoomCallback& l, const ChatRoomCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ChatSession : virtual public ::Glacier2::Session
{
public:

    typedef ChatSessionPrx ProxyType;
    typedef ChatSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void setCallback(const ::Chat::ChatRoomCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long send(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___send(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ChatSession& l, const ChatSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChatSession& l, const ChatSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Chat
{

template<class T>
class CallbackNC_ChatRoomCallback_init : public Callback_ChatRoomCallback_init_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoomCallback_init(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_init<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_init<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_init<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_init<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChatRoomCallback_init : public Callback_ChatRoomCallback_init_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoomCallback_init(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_init<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_init<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_init<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_initPtr
newCallback_ChatRoomCallback_init(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_init<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChatRoomCallback_send : public Callback_ChatRoomCallback_send_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoomCallback_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_send<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_send<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_send<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_send<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChatRoomCallback_send : public Callback_ChatRoomCallback_send_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoomCallback_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_send<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_sendPtr
newCallback_ChatRoomCallback_send(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_send<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChatRoomCallback_join : public Callback_ChatRoomCallback_join_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoomCallback_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_join<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_join<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_join<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_join<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChatRoomCallback_join : public Callback_ChatRoomCallback_join_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoomCallback_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_join<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_join<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_join<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_joinPtr
newCallback_ChatRoomCallback_join(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_join<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChatRoomCallback_leave : public Callback_ChatRoomCallback_leave_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoomCallback_leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_leave<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_leave<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_leave<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomCallback_leave<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChatRoomCallback_leave : public Callback_ChatRoomCallback_leave_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoomCallback_leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_leave<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_leave<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_leave<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatRoomCallback_leavePtr
newCallback_ChatRoomCallback_leave(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomCallback_leave<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChatSession_setCallback : public Callback_ChatSession_setCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatSession_setCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatSession_setCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatSession_setCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatSession_setCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatSession_setCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChatSession_setCallback : public Callback_ChatSession_setCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatSession_setCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatSession_setCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatSession_setCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatSession_setCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatSession_setCallbackPtr
newCallback_ChatSession_setCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatSession_setCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChatSession_send : public Callback_ChatSession_send_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_ChatSession_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ChatSessionPrx __proxy = ::Chat::ChatSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_send(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ChatSession_sendPtr
newCallback_ChatSession_send(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatSession_send<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChatSession_sendPtr
newCallback_ChatSession_send(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatSession_send<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChatSession_send : public Callback_ChatSession_send_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_ChatSession_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ChatSessionPrx __proxy = ::Chat::ChatSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_send(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ChatSession_sendPtr
newCallback_ChatSession_send(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatSession_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChatSession_sendPtr
newCallback_ChatSession_send(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatSession_send<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
